# 描述项目基础信息
info:
  app:
    name: node16-boot-actuator
    port: 8080
    version: 1.0.0
    author: cicada

server:
  port: 8080
  servlet:
    application-display-name: ProjectTemplate-Web
    context-path: /web

management:
  server:
    port: 8089 #可以自定义端口
  security:
    enabled: false #关掉安全认证
  endpoints:
    web:
      exposure:
        # 打开所有的监控点
        include: "*"
      # 自定义监控路径 monitor
      # 默认值：http://localhost:8016/actuator/*
      # 配置后：http://localhost:8016/monitor/*
      base-path: /monitor
  endpoint:
    beans:
      id: instances
    health:
      show-details: always
    shutdown:
      # 通过指定接口关闭 SpringBoot
      enabled: true


spring:
  boot:
    admin:
      client:
        url: http://localhost:8000/admin # 服务端监听的端口
  h2:
    console:
      path: /h2-console
      enabled: true
      settings:
        web-allow-others: true
  sql:
    init:
      mode: embedded
      platform: h2
      #      classpath 等价于 main/java + main/resources + 第三方jar包的根目录
      schema-locations: classpath:schema-h2.sql #程序运行时，使用schema.sql来创建数据库中的表
      data-locations: classpath:data-h2.sql  #程序运行时，使用data.sql来创建初始数据

  datasource:
    druid:
      # 数据库访问配置, 使用druid数据源
      # 数据源1 mysql
      mysql:
        # 驱动配置信息
        db-type: com.alibaba.druid.pool.DruidDataSource
        #mysql 配置
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shop?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false&allowPublicKeyRetrieval=true
        username: test
        password: 12345678
      # 数据源2 H2
      h2:
        db-type: com.alibaba.druid.pool.DruidDataSource    #使用阿里druid连接池
        url: jdbc:h2:~/test    #test是我创建的数据库名
        username: sa
        password:
        driver-class-name: org.h2.Driver
        # schema: classpath:schema-h2.sql #程序运行时，使用schema.sql来创建数据库中的表
        # data: classpath:data-h2.sql  #程序运行时，使用data.sql来创建初始数据
      # 数据源2 oracle
      oracle:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: oracle.jdbc.driver.OracleDriver
        url: jdbc:oracle:thin:@localhost:1521/xe
        username: scott
        password: tiger
      # 连接池配置
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 连接等待超时时间
      max-wait: 30000
      # 配置检测可以关闭的空闲连接间隔时间
      time-between-eviction-runs-millis: 60000
      # 配置连接在池中的最小生存时间
      min-evictable-idle-time-millis: 300000
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，
      # testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validation-query: select 1
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 是否缓存preparedStatement，也就是PSCache  官方建议MySQL下建议关闭   个人建议如果想用SQL防火墙 建议打开
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-open-prepared-statements: 20
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters, 去掉后监控界面sql无法统计, 'wall'用于防火墙
      filters: stat,wall
      # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
      aop-patterns: com.springboot.service.*


      # WebStatFilter配置
      web-stat-filter:
        enabled: true
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤的格式
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'

      # StatViewServlet配置
      stat-view-servlet:
        enabled: true
        # 访问路径为/druid时，跳转到StatViewServlet
        url-pattern: /druid/*
        # 是否能够重置数据
        reset-enable: false
        # 需要账号密码才能访问控制台
        login-username: druid
        login-password: druid123
        # IP白名单
        allow:
        #　IP黑名单（共同存在时，deny优先于allow）
        # deny: 192.168.1.218

      # 配置StatFilter
      filter:
        stat:
          log-slow-sql: true
# 注释连同EmailController,HtmlEmailController一起注释
#  mail:
#    jndi-name: "mail/Session"
#    host: smtp.163.com
#    username: xxxxxx@163.com
#    password: your POP password
#    properties:
#      mail:
#        smtp:
#          connectiontimeout: 500000
#          timeout: 300000
#          writetimeout: 5000
#          auth: true
#          starttls:
#            enable: true
#            required: true

  redis:
    # Redis数据库索引（默认为0）
    database: 0
    # Redis服务器地址
    host: localhost
    # Redis服务器连接端口
    port: 6379
    pool:
      # 连接池最大连接数（使用负值表示没有限制）
      max-active: 8
      # 连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: -1
      # 连接池中的最大空闲连接
      max-idle: 8
      # 连接池中的最小空闲连接
      min-idle: 0
    # 连接超时时间（毫秒）
    timeout: 10000

  cache:
    ehcache:
      config: 'classpath:ehcache.xml'

  kafka:
    bootstrap-servers: 127.0.0.1:9092 #172.20.0.4
    listener:
      concurrency: 10
      ack-mode: MANUAL_IMMEDIATE
      poll-timeout: 1500

    consumer:
      group-id: test-consumer
      auto-offset-reset: latest
      session:
        timeout:
          ms: 6000

logging:
  level:
    com:
      springboot:
        dao: debug

#MyBatis
mybatis:
  # type-aliases扫描路径
  type-aliases-package: com.springboot.domain
  # mapper xml实现扫描路径
  mapper-locations: classpath:mapper/oracle/*.xml
  property:
    order: BEFORE

#mappers 多个接口时逗号隔开
mapper:
  mappers: com.springboot.config.MyMapper
  not-empty: false
  identity: oracle

#pagehelper
pagehelper:
  helperDialect: oracle
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql


